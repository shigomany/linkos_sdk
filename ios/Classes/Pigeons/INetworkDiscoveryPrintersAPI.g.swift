// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// {@nodoc}
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NetworkDiscoveryPrintersAPI {
  func subnetSearch(subnetRange: String, waitForResponsesTimeout: Int64?) throws -> [String]
  func directedBroadcast(ipAddress: String, waitForResponsesTimeout: Int64?) throws -> [String]
  func localBroadcast(waitForResponsesTimeout: Int64?) throws -> [String]
  func multicast(hops: Int64, waitForResponsesTimeout: Int64?) throws -> [String]
  func findPrinters(printersToFind: [String]?, waitForResponsesTimeout: Int64?) throws -> [String]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NetworkDiscoveryPrintersAPISetup {
  /// The codec used by NetworkDiscoveryPrintersAPI.
  /// Sets up an instance of `NetworkDiscoveryPrintersAPI` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NetworkDiscoveryPrintersAPI?) {
    let subnetSearchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.linkos_sdk.NetworkDiscoveryPrintersAPI.subnetSearch", binaryMessenger: binaryMessenger)
    if let api = api {
      subnetSearchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let subnetRangeArg = args[0] as! String
        let waitForResponsesTimeoutArg: Int64? = isNullish(args[1]) ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        do {
          let result = try api.subnetSearch(subnetRange: subnetRangeArg, waitForResponsesTimeout: waitForResponsesTimeoutArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subnetSearchChannel.setMessageHandler(nil)
    }
    let directedBroadcastChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.linkos_sdk.NetworkDiscoveryPrintersAPI.directedBroadcast", binaryMessenger: binaryMessenger)
    if let api = api {
      directedBroadcastChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let ipAddressArg = args[0] as! String
        let waitForResponsesTimeoutArg: Int64? = isNullish(args[1]) ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        do {
          let result = try api.directedBroadcast(ipAddress: ipAddressArg, waitForResponsesTimeout: waitForResponsesTimeoutArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      directedBroadcastChannel.setMessageHandler(nil)
    }
    let localBroadcastChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.linkos_sdk.NetworkDiscoveryPrintersAPI.localBroadcast", binaryMessenger: binaryMessenger)
    if let api = api {
      localBroadcastChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let waitForResponsesTimeoutArg: Int64? = isNullish(args[0]) ? nil : (args[0] is Int64? ? args[0] as! Int64? : Int64(args[0] as! Int32))
        do {
          let result = try api.localBroadcast(waitForResponsesTimeout: waitForResponsesTimeoutArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      localBroadcastChannel.setMessageHandler(nil)
    }
    let multicastChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.linkos_sdk.NetworkDiscoveryPrintersAPI.multicast", binaryMessenger: binaryMessenger)
    if let api = api {
      multicastChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let hopsArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let waitForResponsesTimeoutArg: Int64? = isNullish(args[1]) ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        do {
          let result = try api.multicast(hops: hopsArg, waitForResponsesTimeout: waitForResponsesTimeoutArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      multicastChannel.setMessageHandler(nil)
    }
    let findPrintersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.linkos_sdk.NetworkDiscoveryPrintersAPI.findPrinters", binaryMessenger: binaryMessenger)
    if let api = api {
      findPrintersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let printersToFindArg: [String]? = nilOrValue(args[0])
        let waitForResponsesTimeoutArg: Int64? = isNullish(args[1]) ? nil : (args[1] is Int64? ? args[1] as! Int64? : Int64(args[1] as! Int32))
        do {
          let result = try api.findPrinters(printersToFind: printersToFindArg, waitForResponsesTimeout: waitForResponsesTimeoutArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      findPrintersChannel.setMessageHandler(nil)
    }
  }
}
