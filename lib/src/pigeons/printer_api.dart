// Autogenerated from Pigeon (v16.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

/// Enumeration of the various printer control languages supported by Zebra Printers.
/// {@category Printer}
enum PrinterLanguage {
  /// Printer control language ZPL.
  zpl,
  /// Printer control language CPCL.
  cpcl,
  /// Printer control language line_print mode.
  linePrint,
}

/// Describe printer status.
/// {@category Printer}
enum PrinterStatus {
  /// The head is cold.
  headCold,
  /// The head is open.
  headOpen,
  /// The head is too hot.
  headTooHot,
  /// The paper is out.
  paperOut,
  /// There is a partial format in progress.
  partialFormatInProgress,
  /// The printer is paused.
  paused,
  /// The printer reports back that it is ready to print.
  readyToPrint,
  /// The receive buffer is full.
  receiveBufferFull,
  /// The ribbon is out.
  ribbonOut,
}

class ConnectionInfo {
  ConnectionInfo({
    this.ipAddress,
    this.macAddress,
    this.port,
  });

  String? ipAddress;

  String? macAddress;

  int? port;

  Object encode() {
    return <Object?>[
      ipAddress,
      macAddress,
      port,
    ];
  }

  static ConnectionInfo decode(Object result) {
    result as List<Object?>;
    return ConnectionInfo(
      ipAddress: result[0] as String?,
      macAddress: result[1] as String?,
      port: result[2] as int?,
    );
  }
}

class _PrinterAPICodec extends StandardMessageCodec {
  const _PrinterAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConnectionInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ConnectionInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PrinterAPI {
  /// Constructor for [PrinterAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PrinterAPI({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PrinterAPICodec();

  /// Returns a [PrinterStatus] that can be used to determine the status of a printer.
  Future<PrinterStatus> currentStatus(ConnectionInfo info) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.linkos_sdk.PrinterAPI.currentStatus';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[info]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return PrinterStatus.values[__pigeon_replyList[0]! as int];
    }
  }

  /// Returns the printer control language (e.g. ZPL or CPCL) of the printer.
  Future<PrinterLanguage> controlLanguage(ConnectionInfo info) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.linkos_sdk.PrinterAPI.controlLanguage';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[info]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return PrinterLanguage.values[__pigeon_replyList[0]! as int];
    }
  }

  /// Prints an image to the connected device as a monochrome image.
  Future<void> printImage(ConnectionInfo info, Uint8List data) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.linkos_sdk.PrinterAPI.printImage';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[info, data]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Sends the appropriate calibrate command to the printer.
  Future<void> calibrate(ConnectionInfo info) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.linkos_sdk.PrinterAPI.calibrate';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[info]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Sends the appropriate print configuration command to the printer.
  Future<void> printConfigurationLabel(ConnectionInfo info) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.linkos_sdk.PrinterAPI.printConfigurationLabel';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[info]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Sends the appropriate restore defaults command to the printer.
  Future<void> restoreDefaults(ConnectionInfo info) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.linkos_sdk.PrinterAPI.restoreDefaults';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[info]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Converts the specified command to bytes using the Java default charset and sends the bytes to the printer.
  Future<void> sendCommand(ConnectionInfo info, String command) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.linkos_sdk.PrinterAPI.sendCommand';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[info, command]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Sends the appropriate reset command to the printer.
  Future<void> reset(ConnectionInfo info) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.linkos_sdk.PrinterAPI.reset';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[info]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
