// Autogenerated from Pigeon (v16.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.plugin.linkos_sdk

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Enumeration of the various printer control languages supported by Zebra Printers. */
enum class PrinterLanguage(val raw: Int) {
  /** Printer control language ZPL. */
  ZPL(0),
  /** Printer control language CPCL. */
  CPCL(1),
  /** Printer control language line_print mode. */
  LINEPRINT(2);

  companion object {
    fun ofRaw(raw: Int): PrinterLanguage? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Describe printer status. */
enum class PrinterStatus(val raw: Int) {
  /** The head is cold. */
  HEADCOLD(0),
  /** The head is open. */
  HEADOPEN(1),
  /** The head is too hot. */
  HEADTOOHOT(2),
  /** The paper is out. */
  PAPEROUT(3),
  /** There is a partial format in progress. */
  PARTIALFORMATINPROGRESS(4),
  /** The printer is paused. */
  PAUSED(5),
  /** The printer reports back that it is ready to print. */
  READYTOPRINT(6),
  /** The receive buffer is full. */
  RECEIVEBUFFERFULL(7),
  /** The ribbon is out. */
  RIBBONOUT(8);

  companion object {
    fun ofRaw(raw: Int): PrinterStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface LinkOsSdkOverTcpIp {
  /** Returns a [PrinterStatus] that can be used to determine the status of a printer. */
  fun currentStatus(ipAddress: String, port: Long?): PrinterStatus
  /** Returns the printer control language (e.g. ZPL or CPCL) of the printer. */
  fun controlLanguage(ipAddress: String, port: Long?): PrinterLanguage
  /** Prints an image to the connected device as a monochrome image. */
  fun printImage(ipAddress: String, port: Long?, data: ByteArray)
  /** Sends the appropriate calibrate command to the printer. */
  fun calibrate(ipAddress: String, port: Long?)
  /** Sends the appropriate print configuration command to the printer. */
  fun printConfigurationLabel(ipAddress: String, port: Long?)
  /** Sends the appropriate restore defaults command to the printer. */
  fun restoreDefaults(ipAddress: String, port: Long?)
  /** Converts the specified command to bytes using the Java default charset and sends the bytes to the printer. */
  fun sendCommand(ipAddress: String, port: Long?, command: String)
  /** Sends the appropriate reset command to the printer. */
  fun reset(ipAddress: String, port: Long?)

  companion object {
    /** The codec used by LinkOsSdkOverTcpIp. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `LinkOsSdkOverTcpIp` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: LinkOsSdkOverTcpIp?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.linkos_sdk.LinkOsSdkOverTcpIp.currentStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ipAddressArg = args[0] as String
            val portArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.currentStatus(ipAddressArg, portArg).raw)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.linkos_sdk.LinkOsSdkOverTcpIp.controlLanguage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ipAddressArg = args[0] as String
            val portArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.controlLanguage(ipAddressArg, portArg).raw)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.linkos_sdk.LinkOsSdkOverTcpIp.printImage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ipAddressArg = args[0] as String
            val portArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            val dataArg = args[2] as ByteArray
            var wrapped: List<Any?>
            try {
              api.printImage(ipAddressArg, portArg, dataArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.linkos_sdk.LinkOsSdkOverTcpIp.calibrate", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ipAddressArg = args[0] as String
            val portArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              api.calibrate(ipAddressArg, portArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.linkos_sdk.LinkOsSdkOverTcpIp.printConfigurationLabel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ipAddressArg = args[0] as String
            val portArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              api.printConfigurationLabel(ipAddressArg, portArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.linkos_sdk.LinkOsSdkOverTcpIp.restoreDefaults", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ipAddressArg = args[0] as String
            val portArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              api.restoreDefaults(ipAddressArg, portArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.linkos_sdk.LinkOsSdkOverTcpIp.sendCommand", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ipAddressArg = args[0] as String
            val portArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            val commandArg = args[2] as String
            var wrapped: List<Any?>
            try {
              api.sendCommand(ipAddressArg, portArg, commandArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.linkos_sdk.LinkOsSdkOverTcpIp.reset", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val ipAddressArg = args[0] as String
            val portArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              api.reset(ipAddressArg, portArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
